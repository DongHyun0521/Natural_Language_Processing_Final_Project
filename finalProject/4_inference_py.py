# -*- coding: utf-8 -*-
"""4_inference.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LvZRueM9Oj0iLU9CcOD5nuP9OiGCBl5D

#inference.py
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install openai

import re
import torch
from transformers import BertTokenizer, BertForSequenceClassification
import openai

# 1. 경로 및 모델 불러오기
base_dir = '/content/drive/MyDrive/finalProject'
model_dir = f'{base_dir}/finetuned_bert'

tokenizer = BertTokenizer.from_pretrained(model_dir)
model = BertForSequenceClassification.from_pretrained(model_dir)
model.eval()
device = "cuda" if torch.cuda.is_available() else "cpu"
model.to(device)

# 2. 변형/우회 욕설을 표준 욕설로 복원하는 함수 (정규화)
def normalize_profanity(text):
    rules = [
        (r"씨[\W\d_]*[1il\|!]+[\W\d_]*[2z]+[\W\d_]*[3e]+[\W\d_]*[4a]+[\W\d_]*발", "씨발"),
        (r"씨[\W\d_]*[1il\|!]+[\W\d_]*[2z]+[\W\d_]*[3e]+[\W\d_]*발", "씨발"),
        (r"씨[^\w가-힣]?[\d\W_]*발", "씨발"),  # 가장 단순화된 우회형도 치환
        (r"ㅅ[\s\W\d_]*ㅂ", "씨발"),
        (r"ㅆ[\s\W\d_]*ㅂ", "씨발"),
        (r"c+[\s\W\d_]*i+[\s\W\d_]*b+[\s\W\d_]*a+[\s\W\d_]*l+", "씨발"),
        (r"씨[^\w가-힣]*[\*#]+발", "씨발"),
        # 필요한 만큼 추가
    ]
    new_text = text
    for pattern, repl in rules:
        new_text = re.sub(pattern, repl, new_text, flags=re.IGNORECASE)
    return new_text

# 3. BERT 분류 함수
def predict_bert(text):
    inputs = tokenizer(text, return_tensors="pt", truncation=True, padding=True, max_length=64).to(device)
    with torch.no_grad():
        logits = model(**inputs).logits
        pred = torch.argmax(logits, dim=1).item()
    return pred

# 4. GPT API로 자연어 순화 함수
def refine_with_gpt(text):
    import openai
    openai.api_key = "sk-..."
    prompt = f"다음 문장을 욕설/비속어 없이 자연스럽고 예의 바르게 순화해줘:\n{text}"
    response = openai.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "너는 한국어 욕설/비속어 순화 전문가야."},
            {"role": "user", "content": prompt}
        ],
        max_tokens=64,
        temperature=0.7
    )
    return response.choices[0].message.content.strip()

# 5. 실시간 테스트 (q 입력시 종료)
print("실시간 혐오/욕설 분류 및 순화 시스템 (종료: q)")
while True:
    user_input = input("문장을 입력하세요: ")
    if user_input.strip().lower() == 'q':
        print("종료합니다.")
        break
    norm_input = normalize_profanity(user_input)
    label = predict_bert(norm_input)
    if label == 1:
        try:
            refined = refine_with_gpt(norm_input)
        except Exception as e:
            refined = "(순화 실패) " + str(e)
        print(f"[탐지: 혐오/욕설] 순화: {refined}")
    else:
        print(f"[탐지: 정상] {user_input}")